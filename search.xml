<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[component-communication]]></title>
    <url>%2F2018%2F07%2F13%2Fcomponent-communication%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[vue组件通信]]></title>
    <url>%2F2018%2F07%2F13%2Fhello-hex%2F</url>
    <content type="text"><![CDATA[父组件向子组件传值 子组件向父组件传值 非父子组件通信 父组件向子组件传值 使用props属性进行传值 示例父组件 123456789101112131415161718&lt;div id=&quot;c-box&quot;&gt; 这是父容器 &lt;componentD :changeState=&quot;changeState&quot;&gt;&lt;/componentD&gt; &lt;button @click=&quot;changeFn&quot;&gt;点击子组件的state值从0开始重新累加&lt;/button&gt;&lt;/div&gt;&lt;script&gt; import componentD from &apos;./d&apos; export default &#123; components: &#123; componentD &#125;, data () &#123; return &#123; changeState: true &#125; &#125; &#125;&lt;/script&gt; 子组件 12345678910props: [&apos;changeState&apos;]props: &#123; changeState: Boolean&#125;props: &#123; changeState: &#123; type: Boolean, default: [0,0,0] //这样可以指定默认的值 &#125;&#125; 注意使用props属性，父组件可以给子组件传值，但是子组件不可以修改父组件给子组件传的值。这里，子组件不可以修改changeState的值。这里需要通过子组件触发事件来通知父组件改变数据。 子组件向父组件传值 子组件内使用this.$emit(‘fn’, data) 示例这里做一个小demo，子组件的state的值从0开始累加。父组件有一个按钮，点击按钮子组件的state值从0开始重新累加. 父组件: 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;template&gt; &lt;div id=&quot;c-box&quot;&gt; 这是父容器 &lt;componentD :changeState=&quot;changeState&quot; @changeNum=&quot;getChangeNum&quot;&gt;&lt;/componentD&gt; &lt;button @click=&quot;changeFn&quot;&gt;点击子组件的state值从0开始重新累加&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import componentD from &apos;./d&apos; export default &#123; components: &#123; componentD &#125;, data () &#123; return &#123; changeState: true &#125; &#125;, methods: &#123; changeFn: function () &#123; this.changeState = false &#125;, getChangeNum: function (data) &#123; this.changeState = data &#125; &#125;, watch: &#123; changeState: function (cul, old) &#123; this.changeState = cul &#125; &#125; &#125;&lt;/script&gt;&lt;style&gt; #c-box &#123; width: 500px; height: 500px; border: 1px solid #ccc; position: relative; &#125;&lt;/style&gt; 子组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;div id=&quot;d-box&quot;&gt; 这是子组件 &lt;span&gt;state:&lt;/span&gt;&lt;span&gt;&#123;&#123;number&#125;&#125;&lt;/span&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; number: 0, timer: null, intervalFlag: true &#125; &#125;, props: &#123; changeState: Boolean &#125;, mounted: function () &#123; this.setIntervalFn() &#125;, methods: &#123; setIntervalFn: function () &#123; this.$emit(&apos;changeNum&apos;, true) this.timer = setInterval(() =&gt; &#123; this.number++ &#125;, 1000) &#125; &#125;, watch: &#123; number: function (cul, old) &#123; this.number = cul &#125;, changeState: function (cul, old) &#123; this.number = 0 clearInterval(this.timer) this.setIntervalFn() &#125; &#125; &#125;&lt;/script&gt;&lt;style&gt; #d-box &#123; width: 300px; height: 300px; border: 1px solid #ccc; position: absolute; left: 100px; top: 100px; &#125;&lt;/style&gt; 非父子组件传值 在根组件放空的vue实例，让所有的子组件都可以调用（这个作为一个中转站），对于不是父子组件的componentC和componentD。componentE调用事件触发(.$emit(‘fn’,123))，componentE调用事件接收（.$on(‘fn’,value =&gt; {})） 示例根组件 123456789101112new Vue(&#123; router, el: &apos;#app&apos;, data: &#123; word: &apos;hello vue&apos;, Bus: new Vue() &#125;, components: &#123; &apos;my-header&apos;: myHeader &#125;, render: h =&gt; h(App)&#125;); componentC 1234&lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;submit: function () &#123; this.$root.Bus.$emit(&apos;eventName&apos;, 123)&#125; componentE 12345created () &#123; this.$root.Bus.$on(&apos;eventName&apos;, value =&gt; &#123; console.log(value) &#125;)&#125;,]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
